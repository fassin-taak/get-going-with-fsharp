{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}{\f1\fmodern\fcharset0\fprq2 TimesNewRomanPSMT;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;\red63\green72\blue204;\red163\green21\blue21;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \fi360\ltrch\loch {\f1\fs28\b0\i0 I know what you're thinking!: There is something wrong here! Where is the function? There is a }{\f0\fs28\b0\i0 printfn}{\f1\fs28\b0\i0  function being called here which is taking a single string parameter as input and then outputting that string parameter to the console. But where is our function? Isn't F# supposed to be a functional-first programming language where nearly everything is a function? That is true. But in this case to make things easier to do, like simple scripting, the F# compiler is creating a "main" function for us which is then called by the .NET runtime. To make this more explicit we can wrap the "Hello, World" code inside of a function ourselves. So let's do that.}
\par\plain {\f1\fs28\b0\i0 Change the code to the following:}
\par\plain \f1\fs28\b0\i0
\par\pard\plain \sa200\sl276\slmult1\ltrch\loch {\f0\fs22    0:    }{\f0\fs22\cf3 open }{\f0\fs22\cf1 System \line    1:     \line    2:    [<EntryPoint>] \line    3:    }{\f0\fs22\cf3 let }{\f0\fs22\cf1 main(argv) = \line    4:      printfn }{\f0\fs22\cf4 "Hello, World!" }{\f0\fs22\cf1 \line    5:      0 \line }
\par\pard\plain \fi360\ltrch\loch {\f1\fs28\b0\i0 Type in }{\f0\fs28\b0\i0 dotnet run}{\f1\fs28\b0\i0  to check that everything still works fine.}
\par\plain {\f1\fs28\b0\i0 The code should be self-explanatory. Line 0 "open"s and makes the classes and objects in the .NET System library available for use by our little program. Line 2 sets the entry point for our program. Line 3 defines our function which takes in a list of strings as its one and only argument for the function. (Note that the type of the argument is not specified in the code. The F# compiler already knows what the type should be.) This parameter is not used in our program. Line 4 prints our "Hello, World!" message and finally line 5 returns the exit value. Notice that on line 5 we didn't need to write "return 0" as in some other languages that you may be familiar with. You just write down the actual return value and that's it!}}