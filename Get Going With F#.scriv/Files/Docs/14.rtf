{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}{\f1\fnil\fcharset0\fprq2 TimesNewRomanPSMT;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;\red63\green72\blue204;\red163\green21\blue21;\red34\green177\blue76;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \sa200\sl276\slmult1\ltrch\loch {\f1\fs28\b0\i0 Open Library.fs in the Solution Explorer which is stored under the Viewer project. Your code should look like:}
\par\plain {\f0\fs22    1:    }{\f0\fs22\cf3 namespace }{\f0\fs22\cf1 Viewer \line    2:     \line    3:    }{\f0\fs22\cf3 module }{\f0\fs22\cf1 Say = \line    4:        }{\f0\fs22\cf3 let }{\f0\fs22\cf1 hello name = \line    5:            printfn }{\f0\fs22\cf4 "Hello %s" }{\f0\fs22\cf1 name \line \line }{\f1\fs28\b0\i0\cf1 Delete the above text and type in the following. First we change the namespace to Fractals.}
\par\plain {\f0\fs22    1:    }{\f0\fs22\cf3 namespace }{\f0\fs22\cf1 Fractals \line    2:     }
\par\plain {\f1\fs28\b0\i0\cf1 And then change the module name to Fractals:\line }{\f0\fs22\cf1 \line    3:    }{\f0\fs22\cf3 module }{\f0\fs22\cf1 Fractals = \line \line }{\f1\fs28\b0\i0\cf1 Now we define a type called FractalType to represent either Julia sets or the Mandelbrot set.\line }{\f0\fs22\cf1 \line    4:      }{\f0\fs22\cf5 /// Define a type for the fractal set type. \line    }{\f0\fs22\cf1 5:}{\f0\fs22\cf5       }{\f0\fs22\cf1 type FractalType = Julia | Mandelbrot \line    6:     \line \line }{\f1\fs28\b0\i0\cf1 The Model type stores the actual fractal type.\line  }{\f0\fs22\cf1 \line    7:      }{\f0\fs22\cf5 /// The model storing the type. \line    }{\f0\fs22\cf1 8:}{\f0\fs22\cf5       }{\f0\fs22\cf1 type Model = \line    9:         Type }{\f0\fs22\cf3 : }{\f0\fs22\cf1 FractalType  \line   10:     }
\par\plain {\f1\fs28\b0\i0\cf1 Now we define an initialization function called Init which sets the initial fractal type to Julia:}{\f0\fs22\cf1 \line \line   11:      }{\f0\fs22\cf5 /// Initialization function for the Model type. \line   }{\f0\fs22\cf1 12:}{\f0\fs22\cf5       }{\f0\fs22\cf3 let }{\f0\fs22\cf1 Init() =  \line   13:         Type = Julia  \line   14:     }
\par\plain {\f1\fs28\b0\i0\cf1 Finally, we define a message type called Msg which is passed to an Update function to update the Model when needed and return a new Model.\line }{\f0\fs22\cf1 \line }{\f0\fs22   15:      }{\f0\fs22\cf5 /// Messages which can be sent to the fractals Model. \line   }{\f0\fs22\cf1 16:}{\f0\fs22\cf5       }{\f0\fs22\cf1 type Msg = \line   17:        | SetFractalType of FractalType \line   18:     \line   19:      }{\f0\fs22\cf5 /// Updates the Model based on the message sent and \line   }{\f0\fs22\cf1 20:}{\f0\fs22\cf5       /// returns a new Model. \line   }{\f0\fs22\cf1 21:}{\f0\fs22\cf5       }{\f0\fs22\cf3 let }{\f0\fs22\cf1 Update msg m = \line   22:        match msg with \line   23:        | SetFractalType t ->  m with Type = t  \line }
\par\plain {\f1\fs28\b0\i0\cf1 The code above should be fairly straightforward to follow if you took the F# tour in chapter 1, have been reading the official F# documentation, did the exercises and have read the introduction to Elmish.WPF.}
\par\plain {\f1\fs28\b0\i0\cf1  }
\par\plain \f1\fs28\b0\i0\cf1}